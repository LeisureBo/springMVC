<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc.xsd	
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util-4.0.xsd"
        >
    <!-- configure the springIOC -->
    <context:component-scan base-package="com.bo.*">
    	<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描，防止SpringMVC和SpringIOC对同一个对象的管理重合 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>        
    </context:component-scan>
	
	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:*.properties" ignore-unresolvable="true" />
	
	<!-- 配置数据源 数据库连接池-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>
	
	<!-- ********Spring集成MyBatis 开始******** -->
	<!-- SqlSessionFactoryBean是一个工厂bean，它的作用就是解析配置（数据源、别名等） -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 加载mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- 自动配置别名 -->
		<!-- <property name="typeAliasesPackage" value="com.bo.model" /> -->
		<!-- 自动扫描mapper.xml -->
		<!-- <property name="mapperLocations" value="classpath:com/bo/mapper/**/*.xml" /> -->
	</bean>
	<!-- mapper接口所在包，Spring会自动扫描并自动装配 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.bo.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- ********Spring集成MyBatis 结束******** -->
	
	<!-- ******** 事务处理配置 begin ******** -->
	<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- AOP方式事务配置 -->
	<!-- 通知 -->  
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		 	<!-- 传播行为 -->  
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 切面 -->  
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.bo.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
	<!-- 注解事务配置 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- ******** 事务处理配置 end ******** -->
</beans>
